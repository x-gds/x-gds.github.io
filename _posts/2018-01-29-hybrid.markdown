---
layout: post
title:  "移动应用混合开发之Hybrid"
date:   2018-01-29 16:26:34 +0800
categories: Android
---

移动应用开发中，使用原生开发的产品体验好，但是相对成本较高：

1. 人力成本：对于同一个项目，需要Android和iOS各出一拨人来做，在人力紧张时无疑会拖慢整体进度。
2. 维护成本：当出现bug时，原生应用一般需要重新发版才能修复，整个流程非常复杂，而且会降低用户满意度。虽然Android平台可以使用Tinker等热修复框架来修复bug，iOS平台用JSpatch（已被封杀），但一来iOS这条路已走不通，二来Android平台每发布一次热更新补丁也是一次考验，因为实现原理不同，每种热修复方式都会多多少少带来一些问题，除非重要模块的重大bug，否则热更新的效果可能得不偿失。

so，第一种办法就是使用H5开发，这样客户端只需很少人力，配合前端就可以短时间内做出一个功能。这种方式见效很快，适合产品功能的快速试错。但是效果就很差了，因为这种方式要遇到需要高精度定位、拍照等原生功能，或者业务内需要Native提供的能力时就没辙了。

从H5的角度出发，还有一种更好的方法就是Hybrid，混合应用开发。即基于WebView，由JS和Native共同配合，双向调用，最终完成功能开发。

## WebView

Android平台就叫`WebView`，iOS叫`UIWebView`。iOS平台是基于Webkit内核的，Android 4.4以前也是，后面改成了Blink内核。API方面iOS平台坑少一点，Android简直了，除了自带的一些坑，每次升级还喜欢对API做一些修改，导致不同版本API不统一，需要做兼容。由于Android原生`WebView`的不给力，后来我们对Android平台的`WebView`换成了腾讯的X5内核，它用的是Blink内核，API层对各个系统版本做了统一，最近功能用到的页面内视频播放的体验也比原生`WebView`要好。

另外，关于Android4.2以下`addJavascriptInterface`的安全漏洞，X5中是修复了的。

### WebChromeClient

`WebChromeClient`主要提供了一些对话框和标题、图标等的回调，我们在显示一个页面时，`onReceivedTitle`一般是必需的。

### WebViewClient

`WebViewClient`提供了一些页面加载过程中的回调，比如页面加载完成回调`onPageFinished`、加载错误回调`onReceivedError`等。这里有一个可以利用的地方，即利用`shouldInterceptRequest`，我们可以拦截页面中的请求。利用这点我们可以实现静态资源的缓存以加速整个加载过程，更进一步，我们在打包时就可以将这些资源文件加入到`.apk`文件中，再利用版本控制在适当时机检查更新，就可以尽最大可能加速Hybrid页面的加载速度。

此外，`shouldOverrideUrlLoading`和`onReceivedError`也非常有用，前者我们可以拦截链接跳转，根据URL来做一些处理，比如业务内定义的Deeplink等等。后者中我们可以实现自己的加载失败的逻辑。

## JS和Native双向通信

在iOS平台，从iOS7开始引入了JavaScriptCore库，这里有几个比较重要的概念：

* JSContext：执行JavaScript代码的上下文，或者说执行环境，可以用它来执行JavaScript代码。
* JSValue：包含了一系列方法，如`toString`等可以方便地转换成对应的Foundation类型。
* JSExport：这是一个协议，可以将OC中的方法导出为JavaScript函数。

```
JSContext *context = [[JSContext alloc] init];
[context evaluateScript:@"var num = 5 + 5"];
JSValue *tripleNum = [context evaluateScript:@“triple(num)”];

@protocol UNAWebJSExport <JSExport>
JSExportAs(callNative, - (void)callNative:(NSString *)functionName params:(JSValue*)params callBackId:(NSString *)callBackId);
@end

@interface UNAUIWebViewHandler() <UNAWebJSExport>
(void)callNative:(NSString *)functionName params:(JSValue *)params callBackId:(NSString *)callBackId {
	blablabla
}
```

注入方式有两种：

```
// 1. 注入原生对象
JSContext *context = [webView valueForKeyPath:@“documentView.webView.mainFrame.javaScriptContext"];
context[@"native"] = self;

// 2. 注入一段JS代码
NSString* sdk_js = @“…………………….”;
[webView stringByEvaluatingJavaScriptFromString:sdk_js];
```

注入时机：最可靠的当然是`webViewDidStartLoad`，但是这里有个坑，如果页面加载的过程中需要调用Native能力的话，因为此时还没有注入，所以会有问题。Android平台也会有这个问题，解决办法是用一个回调，在注入完成后，由Native告诉JavaScript注入完成。

Android平台的实现和iOS平台原理差不多，不过Android平台要用JScontext的话得自己依赖Webkit的相关库。不过Hybrid是依赖于WebView的，这些都是通过WebView执行的，比如执行一段JavaScript代码：

```
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
  webView.evaluateJavascript(jsCommand, vCallback);
} else {
  webView.loadUrl(jsCommand);
}
```

从Android4.4开始新增了一个API，`evaluateJavascript`，从方法签名中第二个参数，可以用回调的方式拿到JS代码的返回值，`loadUrl`方法是没有这个功能的。

原生对象注入：

```
public class WebViewJavaScriptBridge {
  @JavascriptInterface
  public void callNative(final String handlerName, final String params, String callbackId) {
    // doing something
  }
}

mWebView.addJavascriptInterface(mBridge, "native");
```

跟iOS一样，这里注入了一个名为`native`的对象，它有个叫`callNative`的方法。

## 实现过程中的一些说明

1. 上面提到过，注入方式有两种，一种是原生对象的注入，也是我们实现Hybrid的重点。还有一种是JS代码的注入，我们可以利用这点将JS代码中的一些基础组件做成SDK，提前打进客户端安装文件中，再利用版本控制实现一个缓存。
2. 由于JavaScript的运行环境实际上是单线程的，所以一次调用需要动态生成一个JavaScript的回调函数，用来接收Native的执行结果。但是如果直接将JavaScript函数交给Native的话，Native执行结束后应用状态、环境可能发生变化，这时有可能造成一些不可预料的问题，所以不能直接将JavaScript的函数交给Naive。有一个办法是给每个动态生成的JavaScript函数函数一个`id`，Native在执行完成后，调用特定的JavaScript函数将回调函数的`id`和执行结果交给JavaScript世界，由他们处理。
3. 资源缓存：Native拦截到有关图片等资源的请求时，先判断有没有本地缓存，如没有再请求server，这里也需要一套检查更新的版本控制流程。
4. 标题栏闪烁的问题：这个问题解决也很简单，URL中带入相关控制参数，在进入页面时就可以解析URL来对标题栏的风格进行控制。
5. 在这种设计中，架构简洁清晰，在后面的开发中，Native主要提供标准的执行过程和响应内容，而业务实现都由JavaScript来做，等沉淀一段时间后，客户端人力就可以从一些不重要和边缘化的需求中解脱出来了。